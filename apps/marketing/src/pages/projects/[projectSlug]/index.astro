---
import type { Database } from '@/database.types'
import type { ProjectList } from '@prodkt/ui/prodkt-components/project-aside'

import { BoardColumn } from '@prodkt/ui/prodkt-components/kanban'
import { ProjectLayout } from '@prodkt/ui/prodkt-components/project-layout'

// import PageHeader from '@/components/page-header.astro'
import Layout from '@/layouts/PublicLayout.astro'

import { GET } from './index.json'

type Roadmap = Database['public']['Tables']['roadmaps']['Row']
type Project = Database['public']['Tables']['projects']['Row']
type Files = Database['public']['Tables']['directus_files']['Row']
type Issue = Database['public']['Tables']['issues']['Row'] & {
  status: Status
}
type Status = Database['public']['Tables']['status']['Row'] & { tasks: Issue[] } // Ensure Status includes tasks

interface ProjectData {
  projectSlug?: string
  roadmapSlug?: string
  roadmapData?: Roadmap[]
  projectData: Project[]
  issueData: Issue[]
  tasks: Issue[]
  projectListing: ProjectList[]
  projectTitle: string | null
  logo: Files['filename_disk']
  projectLogo: Files['filename_disk']
}

// Fetch and parse data
const response = await GET(Astro)
const data = (await response.json()) as ProjectData

const issueData = data.issueData // Access your issue data from the data object

// Group issues by their status label
const columnsData = issueData.reduce<Record<string, Issue[]>>((acc, issue) => {
  const statusLabel = issue.status?.label ?? 'Unknown' // Use the status label for grouping, default to 'Unknown'
  if (!acc[statusLabel]) {
    acc[statusLabel] = []
  }
  acc[statusLabel].push(issue)
  return acc
}, {})

// Transform grouped tasks into the format for BoardColumn
const columns = Object.entries(columnsData).map(([label, tasks]) => {
  return {
    id: tasks[0]?.status.id || `unknown-${label}`, // Use the first task's status id
    color: tasks[0]?.status.color ?? 'default-color', // Use the first task's status color
    label, // The label is the status label (e.g., "Backlog", "Todo")
    tasks, // Pass the tasks to the column object
    value: label,
  }
})

// Define the desired order of the columns
const desiredOrder = ['Backlog', 'Todo', 'In Progress', 'Done']

// Sort the columns based on the desired order
const orderedColumns = columns.sort((a, b) => {
  return desiredOrder.indexOf(a.value) - desiredOrder.indexOf(b.value)
})
---

<Layout>
  <!-- <PageHeader
    minimal
    text='Projects'
    bullet1='Design'
    bullet2='Previous works'
    bullet3='Visuals'
    bullet4='Concepts'
  /> -->
  <div class='grid grid-cols-1 items-stretch justify-stretch'>
    <!-- @ts-ignore -->
    <ProjectLayout
      projectLogo={data.projectData[0]?.logo?.filename_disk}
      projectTitle={data.projectData[0]?.title as string | null}
      projects={data.projectListing}
      client:only='react'
    >
      {
        orderedColumns.map((column) => (
          <BoardColumn
            column={column}
            tasks={column.tasks as Issue[]}
            isOverlay={false}
            client:only='react'
          />
        ))
      }
    </ProjectLayout>
  </div>
</Layout>

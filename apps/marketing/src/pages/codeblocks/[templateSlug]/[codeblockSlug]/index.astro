---
import type { Database, Json } from '@/database.types'

import { experimental_AstroContainer } from 'astro/container'

import { componentMap } from '@prodkt/blocks/component-map'
import { CodeblockLayout } from '@prodkt/ui/prodkt-components/codeblock-layout'

import PageLayout from '@/layouts/PublicLayout.astro'

import { GET } from './index.json'

type Files = Database['public']['Tables']['directus_files']['Row']

interface Logos {
  logo: {
    filename_disk: Files['filename_disk']
  }
  logo_onDark: {
    filename_disk: Files['filename_disk']
  }
  filename_disk: Files['filename_disk']
}
interface Theme {
  build_template: BuildTemplate
  date_updated: string | null
  id: string
  logo: string | null
  logos: Logos
  slug: string | null
  status: string
  title: string | null
  user_updated: string | null
}
interface Codeblock {
  card_image: string | null
  category: string | null
  date_created: string | null
  date_updated: string | null
  frontmatter: string | null
  html: string | null
  id: string
  named_export: string | null
  slug: string | null
  sort: number | null
  status: string
  syntax: string | null
  title: string | null
  user_created: string | null
  user_updated: string | null
  isStory?: boolean
  storybook_id?: string
  filename?: string
}
interface Layout {
  layouts: Json | null
  code: string
  component_name: string
  component_path: string
  primary_layout: boolean
}

interface BuildTemplate {
  date_created: string | null
  date_updated: string | null
  env: string | null
  id: string
  layouts: Layout[] | null
  logos: Logos
  sort: number | null
  status: string
  title: string | null
  user_created: string | null
  user_updated: string | null

  astro_config: string | null
  package_json: string | null
}

interface Data {
  codeblockData: Codeblock
  templateData: Theme
  NamedExport: string
  codeblockSlug: string
  templateSlug: string
}

const response = await GET(Astro)
const data = (await response.json()) as Data
const container =
  data.codeblockData?.isStory !== true
    ? await experimental_AstroContainer.create()
    : null
const result =
  container !== null
    ? await container.renderToString(componentMap[data.NamedExport])
    : ''

const defaultFile = data.codeblockData.filename ?? 'index.astro'

const files = {
  [`${defaultFile}`]: {
    code: `${data.codeblockData.html}`,
    readOnly: true,
    active: true,
    hidden: false,
  },
  '/layouts/Layout.astro': {
    code: `${data.templateData.build_template?.layouts?.[0]?.code}`,
    // code: `${data.templateData.build_template?.layouts?.[0]?.code}`,
    readOnly: true, // Set as non-editable, defaults to `false`
    active: false, // Set as main file, defaults to `false`
    hidden: false, // Tab visibility, defaults to `false`
  },
  '/package.json': {
    code: `${data.templateData.build_template?.package_json}`,
    readOnly: false, // Set as non-editable, defaults to `false`
    active: false, // Set as main file, defaults to `false`
    hidden: false, // Tab visibility, defaults to `false`
  },
  '/astro.config.mjs': {
    code: `${data.templateData.build_template?.astro_config}`,
    readOnly: false, // Set as non-editable, defaults to `false`
    active: false, // Set as main file, defaults to `false`
    hidden: false, // Tab visibility, defaults to `false`
  },
}
---

<PageLayout>
  <CodeblockLayout
    client:load
    title={data.codeblockData.title}
    buildLogo={data.templateData.build_template.logos.logo
      ?.filename_disk as string}
    buildLogoOnDark={data.templateData.build_template.logos.logo_onDark
      ?.filename_disk as string}
    logo={data.templateData.logos.logo?.filename_disk as string}
    logoOnDark={data.templateData.logos.logo_onDark?.filename_disk as string}
    template='astro'
    componentData={files}
  >
    {
      data.codeblockData?.isStory !== true ? (
        <iframe
          class='customLevelnLayout w-full h-full min-h-80 isolate bg-[var(--gray1)] rounded-2xl overflow-hidden border border-[var(--grayA4)] pr-0 ml-0.5 max-h-[calc(100dvh_-_192px)]'
          srcdoc={result}
          sandbox='allow-popups-to-escape-sandbox allow-scripts allow-popups allow-forms allow-pointer-lock allow-top-navigation allow-modals'
        />
      ) : null
    }
    {
      data.codeblockData?.isStory === true ? (
        <iframe
          class='customLevelnLayout w-full h-full min-h-80 isolate bg-[var(--gray1)] rounded-2xl overflow-hidden border border-[var(--grayA4)] pr-0 ml-0.5 max-h-[calc(100dvh_-_192px)]'
          src={`https://ui.prodkt.cloud/iframe.html?id=${data.codeblockData?.storybook_id}&viewMode=story&shortcuts=false&singleStory=true`}
          sandbox='allow-popups-to-escape-sandbox allow-scripts allow-popups allow-forms allow-pointer-lock allow-top-navigation allow-modals'
        />
      ) : null
    }
  </CodeblockLayout>
</PageLayout>
